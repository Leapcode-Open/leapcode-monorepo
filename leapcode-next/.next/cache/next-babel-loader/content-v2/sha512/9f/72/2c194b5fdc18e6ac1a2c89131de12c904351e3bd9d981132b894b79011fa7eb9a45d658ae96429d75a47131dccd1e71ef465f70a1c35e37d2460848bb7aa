{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { auth } from \"./firebase\";\nimport cookies from 'next-cookies';\nimport jscookie from 'js-cookie';\nexport const COOKIE_TOKEN = 'lptoken';\nexport const API_URL = process.env.NEXT_PUBLIC_APIURL;\nexport const SERVER_API_KEY = process.env.SERVER_API_KEY ? process.env.SERVER_API_KEY : 'notoken';\nexport const getToken = async () => {\n  //const token = auth().currentUser ? await auth().currentUser.getIdToken() : 'notokeb';\n  const co = await jscookie.get('lptoken');\n  const token = co ? co : 'notokeb';\n  return token;\n};\nexport const API_HEADERS = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n  'authorization': `Bearer ${getToken()}`\n};\nexport const GET_TOKEN_HEADER = async () => ({\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n  'authorization': `Bearer ${await getToken()}`\n});\nexport const GET_SERVER_TOKEN_HEADER = async ctx => {\n  const {\n    lptoken\n  } = cookies(ctx);\n  return {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'authorization': `Bearer ${lptoken}`,\n    'server-access-key': `${SERVER_API_KEY}`\n  };\n};\nexport const GET_AUTH_USER_DETAILS = async ctx => {\n  const {\n    lptoken\n  } = cookies(ctx);\n  if (!lptoken) return false;\n  let user = await fetch(API_URL + `/auth/authUser/`, {\n    headers: await GET_SERVER_TOKEN_HEADER(ctx)\n  });\n  user = await user.json();\n  return _objectSpread({}, user);\n};","map":{"version":3,"sources":["/Users/stanly/Documents/projects/leapcode-next/config/constants.js"],"names":["auth","cookies","jscookie","COOKIE_TOKEN","API_URL","process","env","NEXT_PUBLIC_APIURL","SERVER_API_KEY","getToken","co","get","token","API_HEADERS","GET_TOKEN_HEADER","GET_SERVER_TOKEN_HEADER","ctx","lptoken","GET_AUTH_USER_DETAILS","user","fetch","headers","json"],"mappings":";;;;;;AAAA,SAASA,IAAT,QAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,MAAMC,YAAY,GAAG,SAArB;AACP,OAAO,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA5B;AACP,OAAO,MAAMC,cAAc,GAAGH,OAAO,CAACC,GAAR,CAAYE,cAAZ,GAA6BH,OAAO,CAACC,GAAR,CAAYE,cAAzC,GAA2D,SAAlF;AAEP,OAAO,MAAMC,QAAQ,GAAG,YAAY;AAChC;AACA,QAAMC,EAAE,GAAG,MAAMR,QAAQ,CAACS,GAAT,CAAa,SAAb,CAAjB;AACA,QAAMC,KAAK,GAAGF,EAAE,GAAGA,EAAH,GAAQ,SAAxB;AACA,SAAOE,KAAP;AACH,CALM;AAOP,OAAO,MAAMC,WAAW,GAAG;AACvB,YAAU,kBADa;AAEvB,kBAAgB,kBAFO;AAGvB,mBAAkB,UAASJ,QAAQ,EAAG;AAHf,CAApB;AAOP,OAAO,MAAMK,gBAAgB,GAAG,aAAa;AACzC,YAAU,kBAD+B;AAEzC,kBAAgB,kBAFyB;AAGzC,mBAAkB,UAAS,MAAML,QAAQ,EAAG;AAHH,CAAb,CAAzB;AAOP,OAAO,MAAMM,uBAAuB,GAAG,MAAOC,GAAP,IAAe;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAchB,OAAO,CAACe,GAAD,CAA3B;AACA,SAAO;AACH,cAAU,kBADP;AAEH,oBAAgB,kBAFb;AAGH,qBAAkB,UAASC,OAAQ,EAHhC;AAIH,yBAAsB,GAAET,cAAe;AAJpC,GAAP;AAMH,CARM;AAWP,OAAO,MAAMU,qBAAqB,GAAG,MAAOF,GAAP,IAAe;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAchB,OAAO,CAACe,GAAD,CAA3B;AACA,MAAG,CAACC,OAAJ,EACI,OAAO,KAAP;AACJ,MAAIE,IAAI,GAAG,MAAMC,KAAK,CAAChB,OAAO,GAAE,iBAAV,EAA4B;AAC9CiB,IAAAA,OAAO,EAAE,MAAMN,uBAAuB,CAACC,GAAD;AADQ,GAA5B,CAAtB;AAGAG,EAAAA,IAAI,GAAG,MAAMA,IAAI,CAACG,IAAL,EAAb;AACA,2BACOH,IADP;AAGH,CAXM","sourcesContent":["import { auth } from \"./firebase\";\nimport cookies from 'next-cookies';\nimport jscookie from 'js-cookie';\nexport const COOKIE_TOKEN = 'lptoken';\nexport const API_URL = process.env.NEXT_PUBLIC_APIURL;\nexport const SERVER_API_KEY = process.env.SERVER_API_KEY ? process.env.SERVER_API_KEY  : 'notoken';\n\nexport const getToken = async () => {\n    //const token = auth().currentUser ? await auth().currentUser.getIdToken() : 'notokeb';\n    const co = await jscookie.get('lptoken');\n    const token = co ? co : 'notokeb'\n    return token;\n}\n\nexport const API_HEADERS = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'authorization': `Bearer ${getToken()}`\n}\n\n\nexport const GET_TOKEN_HEADER = async () => ({\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'authorization': `Bearer ${await getToken()}`\n})\n\n\nexport const GET_SERVER_TOKEN_HEADER = async (ctx) => {\n    const { lptoken } = cookies(ctx);\n    return({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${lptoken}`,\n        'server-access-key': `${SERVER_API_KEY}` \n    })\n}\n\n\nexport const GET_AUTH_USER_DETAILS = async (ctx) => {\n    const { lptoken } = cookies(ctx);\n    if(!lptoken)\n        return false\n    let user = await fetch(API_URL+`/auth/authUser/`, {\n        headers: await GET_SERVER_TOKEN_HEADER(ctx)\n    })\n    user = await user.json();\n    return {\n        ...user\n    }\n}"]},"metadata":{},"sourceType":"module"}